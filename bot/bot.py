# -*- coding: utf-8 -*-

from db import *
import time
import telebot
from telebot import types
import config

bot = telebot.TeleBot(config.token_prod)

from sqlalchemy import text
from sqlalchemy.orm import sessionmaker, scoped_session
session = scoped_session(sessionmaker(bind=engine))

from get_stats import get_stats_by, get_stats_subscribers

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ '/start' –∏ '/help'.
@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    print('Have new user')
    try:
        referral = message.text.split('/start ')[1]
        print(referral)
        start_text = f'–ü–æ—Ö–æ–∂–µ —Ç—ã –ø—Ä–∏—à—ë–ª –æ—Ç {referral}.\n'
    except Exception as e:
        start_text = f'–ú—ã —É–∂–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å\n'

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —é–∑–µ—Ä –Ω–æ–≤—ã–π.
    if user_exist(message.chat.id):
        start_text += '–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n'
    # –°–æ–æ–±—â–∏—Ç—å –æ —Ç–µ—Å—Ç–æ–≤–æ–º –ø–µ—Ä–∏–æ–¥–µ
    else:
        print('else here')
        start_text += '–†–∞–¥ —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –≤ 7 –¥–Ω–µ–π.\n'
        start_text += '–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è –í—ã –º–æ–∂–µ—Ç–µ –∏–∑—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏—Ä–∂–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç, –∞ —Ç–∞–∫ –∂–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –Ω–∏–º –≤ —Å–ª—É—á–∞–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π.'
    # –õ–∏–±–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å

    markup = types.InlineKeyboardMarkup(row_width=3)
    btn1 = types.InlineKeyboardButton("üìã –ü–æ–¥–ø–∏—Å–∫–∏", callback_data='subscriptions')
    btn2 = types.InlineKeyboardButton("üíµ –û–ø–ª–∞—Ç–∞", callback_data='payment')
    btn3 = types.InlineKeyboardButton("ü™™ –û –±–æ—Ç–µ", callback_data='about')
    markup.add(btn1, btn2, btn3)

    bot.send_message(message.chat.id, start_text, reply_markup=markup)


# === –ü—Ä–∏—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
@bot.message_handler(func=lambda message: message.chat.id != config.SUPPORT_CHAT_ID)
def handle_user_message(message):
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    forwarded = bot.forward_message(config.SUPPORT_CHAT_ID, message.chat.id, message.id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å: id –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è -> id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message_to_user[forwarded.id] = message.chat.id

    bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ===
@bot.message_handler(func=lambda message: message.chat.id == config.SUPPORT_CHAT_ID and message.reply_to_message is not None)
def handle_support_reply(message):
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
    replied_message_id = message.reply_to_message.id

    # –ò—â–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
    if replied_message_id in message_to_user:
        user_id = message_to_user[replied_message_id]

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–æ—Ç–∞:\n\n{message.text}")
        except Exception as e:
            bot.send_message(SUPPORT_CHAT_ID, f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    else:
        bot.send_message(SUPPORT_CHAT_ID, "[–û—à–∏–±–∫–∞] –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data == 'subscriptions':
        subscriptions_handler(call.message.chat.id, call.id)
    elif call.data == 'payment':
        payments_handler(call.message.chat.id, call.id)
    elif call.data == 'about':
        about_handler(call.message.chat.id, call.id)
    elif call.data == 'category':
        category_handler(call.message.chat.id, call.id)
    elif call.data == 'jobcenter':
        jobcenter_handler(call.message.chat.id, call.id)
    elif call.data == 'feedback':
        feedback_handler(call.message.chat.id, call.id)
    elif call.data == 'creditcard':
        creditcard_handler(call.message.chat.id, call.id)
    elif call.data == 'cryptcoin':
        cryptcoin_handler(call.message.chat.id, call.id)
    elif call.data == 'tgstars':
        tgstars_handler(call.message.chat.id, call.id)


def subscriptions_handler(userid, callid):
    bot.answer_callback_query(callid, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ü–æ–¥–ø–∏—Å–∫–∏")

    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("üìÇ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data='category')
    btn2 = types.InlineKeyboardButton("üè¢ –í—ã–±—Ä–∞—Ç—å –±–∏—Ä–∂–∏", callback_data='jobcenter')
    markup.add(btn1, btn2)

    bot.send_message(userid, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö...", reply_markup=markup)

def payments_handler(userid, callid):
    bot.answer_callback_query(callid, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –û–ø–ª–∞—Ç—É")

    markup = types.InlineKeyboardMarkup(row_width=3)
    btn1 = types.InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–æ–π", callback_data='creditcard')
    btn2 = types.InlineKeyboardButton("üèµ –ö—Ä–∏–ø—Ç–æ–π", callback_data='cryptcoin')
    btn3 = types.InlineKeyboardButton("‚≠êÔ∏è –¢–ì –∑–≤—ë–∑–¥–∞–º–∏", callback_data='tgstars')
    markup.add(btn1, btn2, btn3)

    bot.send_message(userid, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ...", reply_markup=markup)

def about_handler(userid, callid):
    bot.answer_callback_query(callid, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –û –±–æ—Ç–µ")
    
    markup = types.InlineKeyboardMarkup(row_width=3)
    btn1 = types.InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª", url='https://t.me/FreeLanceGet')
    btn2 = types.InlineKeyboardButton("üë• –ß–∞—Ç", url='https://t.me/getFreelanceChat')
    btn3 = types.InlineKeyboardButton("üë®‚Äçüëß‚Äçüëß –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º", callback_data='feedback')
    markup.add(btn1, btn2, btn3)

    bot.send_message(userid, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ...", reply_markup=markup)

def category_handler(userid, callid):
    bot.answer_callback_query(callid, '–í—ã–±—Ä–∞–Ωo –ö–∞—Ç–µ–≥–æ—Ä–∏–∏')
    bot.send_message(userid, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞–±–æ—Ç, –æ –∫–æ—Ç–æ—Ä—ã—Ö —Ö—Ç–∏—Ç–µ —É–∑–Ω–∞–≤–∞—Ç—å –ø–µ—Ä–≤—ã–º.')

def jobcenter_handler(userid, callid):
    bot.answer_callback_query(callid, '–í—ã–±—Ä–∞–Ω–∞ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
    bot.send_message(userid, '–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂–∏, —Å –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏.')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–∏: {message_id_–≤_—á–∞—Ç–µ_–ø–æ–¥–¥–µ—Ä–∂–∫–∏: user_id}
# TODO –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –ë–î
message_to_user = {}
def feedback_handler(userid, callid):
    bot.answer_callback_query(callid, '–í—ã–±—Ä–∞–Ω–∞ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
    bot.send_message(userid, '–Ø –≥–æ—Ç–æ–≤ –ø–µ—Ä–µ–¥–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤–æ–µ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É.')

def creditcard_handler(userid, callid):
    bot.answer_callback_query(callid, '–í—ã–±—Ä–∞–Ω–∞ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π')
    bot.send_message(userid, '–≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â—ë —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.')

def cryptcoin_handler(userid, callid):
    bot.answer_callback_query(callid, '–í—ã–±—Ä–∞–Ω–∞ –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π')
    bot.send_message(userid, '–≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â—ë —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.')

def tgstars_handler(userid, callid):
    bot.answer_callback_query(callid, '–í—ã–±—Ä–∞–Ω–∞ –û–ø–ª–∞—Ç–∞ –¢–ì –∑–≤—ë–∑–¥–∞–º–∏')
    bot.send_message(userid, '–≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â—ë —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.')




### OLD CODE ###

@bot.message_handler(commands=['wrk', 'list', 'cmd'])
def handle_list(message):
    if message.chat.id < 0:
        bot.send_message(message.chat.id, 'Please use private messages')
        return
    text = '\U0001f1f7\U0001f1fa /freelansim -- Last job from freelansim.ru\n'+\
           '\U0001f1f7\U0001f1fa /freelancehunt -- Last job from freelansim.ru\n'+\
           '\U0001f1fa\U0001f1f8 /freelancecom -- Last job from freelance.com'

    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['stats', 'st'])
def handle_stats(message):
    
    text = 'üìà Statistics by category of job'
    text = text+'\n'+'``` Time            ( 1   /7   /30 days)```'
    categories = ['admin', 'webdev', 'dev', 'webdis']
    for category in categories:
        # print(category)
        day, week, month = get_stats_by(category)
        text = text+'\n'+'``` Jobs in {:8s}: {:,d}  {:,d}  {:,d}```'.format(category, day, week, month) 
        # print(text)

    text = text+'\nüë• '+'_Subscribed users:_ *'+str(get_stats_subscribers())+'*'
    print(text)
    bot.send_message(message.chat.id, text, parse_mode='MARKDOWN')


@bot.message_handler(commands=['freelancecom', 'fc'])
def handle_freelancecom(message):
    if message.chat.id < 0:
        bot.send_message(message.chat.id, 'Please use private messages')
        return
    output = '\u2328 /freelance_adm - Last jobs for sysadmins\n'+\
             '\u2692 /freelance_webdev - Last jobs for Web Developers\n'+\
             '\U0001f307 /freelance_webdis - Last jobs for Web Designers\n'+\
             '\U0001f6e0 /freelance_dev - Last jobs for Developers'
    bot.send_message(message.chat.id, output)

@bot.message_handler(commands=['freelansim', 'fr'])
def handle_freelansim(message):
    if message.chat.id < 0:
        bot.send_message(message.chat.id, 'Please use private messages')
        return
    output = '\u2328 /freelansim_adm - Last jobs for sysadmins\n'+\
             '\u2692 /freelansim_webdev - Last jobs for Web Developers\n'+\
             '\U0001f307 /freelansim_webdis - Last jobs for Web Designers\n'+\
             '\U0001f6e0 /freelansim_dev - Last jobs for Developers'
    bot.send_message(message.chat.id, output)

@bot.message_handler(commands=['freelancehunt', 'fch'])
def handle_freelancehunt(message):
    if message.chat.id < 0:
        bot.send_message(message.chat.id, 'Please use private messages')
        return
    output = '\u2328 /freelancehunt_adm - Last jobs for sysadmins\n'+\
             '\u2692 /freelancehunt_webdev - Last jobs for Web Developers\n'+\
             '\U0001f307 /freelancehunt_webdis - Last jobs for Web Designers\n'+\
             '\U0001f6e0 /freelancehunt_dev - Last jobs for Developers'
    bot.send_message(message.chat.id, output)


@bot.message_handler(commands=['freelansim_adm', 'fra'])
def handle_freelansim_adm(msg):
    send_jobs('freelansim', 'admin', msg.chat.id)

@bot.message_handler(commands=['freelansim_webdev', 'frw'])
def handle_freelansim_webdev(msg):
    send_jobs('freelansim', 'webdev', msg.chat.id)

@bot.message_handler(commands=['freelansim_webdis', 'frwd'])
def handle_freelansim_webdis(msg):
    send_jobs('freelansim', 'webdis', msg.chat.id)

@bot.message_handler(commands=['freelansim_dev', 'frd'])
def handle_freelansim_dev(msg):
    send_jobs('freelansim', 'dev', msg.chat.id)

@bot.message_handler(commands=['freelance_adm', 'fca'])
def handle_freelansim_adm(msg):
    send_jobs('freelance.com', 'admin', msg.chat.id)

@bot.message_handler(commands=['freelance_webdev', 'fcw'])
def handle_freelance_webdev(msg):
    send_jobs('freelance', 'webdev', msg.chat.id)

@bot.message_handler(commands=['freelance_webdis', 'fcwd'])
def handle_freelance_webdis(msg):
    send_jobs('freelance', 'webdis', msg.chat.id)

@bot.message_handler(commands=['freelance_dev', 'fcd'])
def handle_freelance_dev(msg):
    send_jobs('freelance', 'dev', msg.chat.id)

@bot.message_handler(commands=['freelancehunt_adm', 'fcha'])
def handle_freelancehunt_dev(msg):
    send_jobs('freelancehunt', 'admin', msg.chat.id)

@bot.message_handler(commands=['freelancehunt_webdev', 'fchw'])
def handle_freelancehunt_dev(msg):
    send_jobs('freelancehunt', 'webdev', msg.chat.id)

@bot.message_handler(commands=['freelancehunt_webdis', 'fchwd'])
def handle_freelancehunt_dev(msg):
    send_jobs('freelancehunt', 'webdis', msg.chat.id)

@bot.message_handler(commands=['freelancehunt_dev', 'fchd'])
def handle_freelancehunt_dev(msg):
    send_jobs('freelancehunt', 'dev', msg.chat.id)

@bot.message_handler(commands=['subscribe_adm', 'sa'])
def handle_admin_subscribe(message):
    # if user doesn't exist
    if not user_exist(message.from_user.id):
        Subscription().add_new(message.from_user.username, message.from_user.id, 'admin', session)
    else: # else update existing subscription
        try:
            Subscription().update(message.from_user.id, 'admin', session)
            session.commit()
        except:
            session.rollback()
            raise
        finally:
            session.close()

    output = 'Chat ID: ' + str(message.chat.id) + \
             '\nUser ID: ' + str(message.from_user.id) + \
             '\nNick: ' + str(message.from_user.username) + \
             '\nLast JOB ID in this category: ' + str(get_last_job('admin')) + \
             '\n*You subscribed on Administration category*'
    bot.send_message(message.chat.id, output)

@bot.message_handler(commands=['subscribe_dev', 'sd'])
def handle_develop_subscribe(message):
    # if user doesn't exist
    if not user_exist(message.from_user.id):
        Subscription().add_new(message.from_user.username, message.from_user.id, 'dev', session)
    else: # else update existing subscription
        try:
            Subscription().update(message.from_user.id, 'dev', session)
            session.commit()
        except:
            session.rollback()
            raise
        finally:
            session.close()

    output = 'Chat ID: ' + str(message.chat.id) + \
             '\nUser ID: ' + str(message.from_user.id) + \
             '\nNick: ' + str(message.from_user.username) + \
             '\nLast JOB ID in this category: ' + str(get_last_job('dev')) + \
             '\nYou subscribed on Development category'
    bot.send_message(message.chat.id, output)

@bot.message_handler(commands=['subscribe_webdev', 'swd'])
def handle_webdevelop_subscribe(message):
    # if user doesn't exist
    if not user_exist(message.from_user.id):
        Subscription().add_new(message.from_user.username, message.from_user.id, 'webdev', session)
    else: # else update existing subscription
        try:
            Subscription().update(message.from_user.id, 'webdev', session)
            session.commit()
        except:
            session.rollback()
            raise
        finally:
            session.close()

    output = 'Chat ID: ' + str(message.chat.id) + \
             '\nUser ID: ' + str(message.from_user.id) + \
             '\nNick: ' + str(message.from_user.username) + \
             '\nLast JOB ID in this category: ' + str(get_last_job('webdev')) + \
             '\nYou subscribed on Web Development category'
    bot.send_message(message.chat.id, output)

@bot.message_handler(commands=['subscribe_webdis', 'swds'])
def handle_webdesign_subscribe(message):
    # if user doesn't exist
    if not user_exist(message.from_user.id):
        Subscription().add_new(message.from_user.username, message.from_user.id, 'webdis', session)
    else: # else update existing subscription
        try:
            Subscription().update(message.from_user.id, 'webdis', session)
            session.commit()
        except:
            session.rollback()
            raise
        finally:
            session.close()

    output = 'Chat ID: ' + str(message.chat.id) + \
             '\nUser ID: ' + str(message.from_user.id) + \
             '\nNick: ' + str(message.from_user.username) + \
             '\nLast JOB ID in this category: ' + str(get_last_job('webdis')) + \
             '\nYou subscribed on Web Design category'
    bot.send_message(message.chat.id, output)

@bot.message_handler(content_types=["text"])
def repeat_all_messages(message):  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –∏–≥—Ä–∞–µ—Ç –Ω–∏–∫–∞–∫–æ–π —Ä–æ–ª–∏, –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ
    print(message.chat.id)
    print(message)
    if not message.chat.id == config.freelance_chan_id:
        text = str(message.chat.id) + '\n' + message.text
        bot.send_message(message.chat.id, text)

#####################################################################
def user_exist(user_id):
    cur = session.execute(text("SELECT id FROM users WHERE tele_id = '{}'".format(user_id)))
    try:
        output = 'Checked ID: {} \
                 \nExisted User ID: {} \
                 \n__DEBUG__ __MESSAGE__'.format(user_id, cur.fetchone()[0])
        bot.send_message(user_id, output)
        return True
    except TypeError: # if not in DB
        return False

class Subscription(object):
    def add_new(self, user_name, tele_id, category, session):
        # add new subscription
        user_row = User(name=user_name,
                        tele_id=tele_id,
                        last_job=get_last_job(category),
                        category=category)
        session.add(user_row)
        session.commit()

    def update(self, tele_id, category, session):
        session.query(User).\
            filter(User.tele_id == tele_id).\
            update({"last_job": get_last_job(category),
                    "category": category})

def get_last_job(category):
    cur = session.execute("SELECT id \
                           FROM job \
                           WHERE category = '{}' \
                           ORDER BY id DESC \
                           LIMIT 1".format(category))
    return cur.fetchone()[0]

def send_jobs(site, category, user_id):
    output = fetch_jobs(site, category)
    for msg in output:
        bot.send_message(user_id, msg, parse_mode='HTML', disable_web_page_preview=True)

    output = 'You can subscribe for updates in this category by /subscribe_{}'.format(category) + \
             '\nOnly one category can be subscribed'
    bot.send_message(user_id, output)

def fetch_jobs(site, category):
    output = []
    messages_limit = 5
    cur = session.execute("SELECT * \
                           FROM job \
                           WHERE url like '%{}%' \
                           AND category = '{}' \
                           ORDER BY id \
                           DESC LIMIT {}".format(site, category, messages_limit))
    jobs = cur.fetchall()
    for job in jobs:
        text = str(job.description)
        if text == None: text = '-'
        
        price = job.price
        if job.price == None: price = '-+-'

        output.append("    üõ† <b>{}</b>".format(str(job.title))  + \
                    "\n    üï∞ {} #Ô∏è‚É£ {}".format(job[7], job[0]) + \
                    "\n    üí∞ {}".format(price) + \
                    "\n    üåê <a href='{}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>".format(job[4]) + \
                    "\n    üóí {}".format(text))

    return output


if __name__ == '__main__':

    while True:
        print("ParceLancer Started")
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(f'–°–ª–æ–º–∞–ª—Å—è: {e} : {e.__cause__}')

        time.sleep(1)
