# -*- coding: utf-8 -*-

from db import *
import time
from datetime import datetime, timezone
import telebot
from telebot import types
import config

bot = telebot.TeleBot(config.token_prod)

from sqlalchemy import text
from sqlalchemy.orm import sessionmaker, scoped_session
session = scoped_session(sessionmaker(bind=engine))

from get_stats import get_stats_by, get_stats_subscribers

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ '/start' –∏ '/help'.
@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    print(f'Have new user? {message.chat.id}')
    ref_id = 0 # –ï—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–µ—Ç
    try:
        reflink = message.text.split('/start ')[1]
        ref_id, ref_name = get_referral_id_by_reflink(reflink)
        print(f'REF: {reflink}')
        print(f'ID: {ref_id}')
        start_text = f'–ü–æ—Ö–æ–∂–µ —Ç—ã –ø—Ä–∏—à—ë–ª –æ—Ç {ref_name}.\n'
    except Exception as e:
        start_text = f'–ú—ã —É–∂–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å\n'

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —é–∑–µ—Ä –Ω–æ–≤—ã–π.
    if user_exist(message.chat.id):
        print('–Æ–∑–µ—Ä —É–∂–µ –µ—Å—Ç—å')
        start_text += '–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n'
    # –°–æ–æ–±—â–∏—Ç—å –æ —Ç–µ—Å—Ç–æ–≤–æ–º –ø–µ—Ä–∏–æ–¥–µ
    else:
        print('–Æ–∑–µ—Äa –µ—â—ë –Ω–µ—Ç')
        User().add_new(message.from_user.username, message.from_user.id, ref_id)
        Subscription().add_new(message.from_user.id, 'TESTSUBS')
        # TODO —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —é–∑–µ—Ä–∞ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î, —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–ª–∏–Ω–∫–∞)
        start_text += '–†–∞–¥ —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –≤ 7 –¥–Ω–µ–π.\n'
        start_text += '–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è —Ç—ã —Å–º–æ–∂–µ—à—å –∏–∑—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏—Ä–∂–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç, –∞ —Ç–∞–∫ –∂–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –Ω–∏–º –≤ —Å–ª—É—á–∞–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π.'
    # –õ–∏–±–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å

    markup = types.InlineKeyboardMarkup(row_width=3)
    btn1 = types.InlineKeyboardButton("üìã –ü–æ–¥–ø–∏—Å–∫–∏", callback_data='subscriptions')
    btn2 = types.InlineKeyboardButton("üíµ –û–ø–ª–∞—Ç–∞", callback_data='payment')
    btn3 = types.InlineKeyboardButton("ü™™ –û –±–æ—Ç–µ", callback_data='about')
    markup.add(btn1, btn2, btn3)

    bot.send_message(message.chat.id, start_text, reply_markup=markup)


# === –ü—Ä–∏—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
@bot.message_handler(func=lambda message: message.chat.id != config.SUPPORT_CHAT_ID)
def handle_user_message(message):
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    forwarded = bot.forward_message(config.SUPPORT_CHAT_ID, message.chat.id, message.id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å: id –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è -> id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message_to_user[forwarded.id] = message.chat.id

    bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ===
@bot.message_handler(func=lambda message: message.chat.id == config.SUPPORT_CHAT_ID and message.reply_to_message is not None)
def handle_support_reply(message):
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
    replied_message_id = message.reply_to_message.id

    # –ò—â–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
    if replied_message_id in message_to_user:
        user_id = message_to_user[replied_message_id]

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–æ—Ç–∞:\n\n{message.text}")
        except Exception as e:
            bot.send_message(SUPPORT_CHAT_ID, f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    else:
        bot.send_message(SUPPORT_CHAT_ID, "[–û—à–∏–±–∫–∞] –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data == 'subscriptions':
        subscriptions_handler(call.message.chat.id, call.id)
    elif call.data == 'payment':
        payments_handler(call.message.chat.id, call.id)
    elif call.data == 'payweek':
        payweek_handler(call.message.chat.id, call.id)
    elif call.data == 'paymonth':
        paymonth_handler(call.message.chat.id, call.id)
    elif call.data == 'payyear':
        payyear_handler(call.message.chat.id, call.id)
    elif call.data == 'about':
        about_handler(call.message.chat.id, call.id)
    elif call.data == 'category':
        category_handler(call.message.chat.id, call.id)
    elif call.data == 'jobcenter':
        jobcenter_handler(call.message.chat.id, call.id)
    elif call.data == 'feedback':
        feedback_handler(call.message.chat.id, call.id)
    elif call.data == 'creditcard':
        creditcard_handler(call.message.chat.id, call.id)
    elif call.data == 'cryptcoin':
        cryptcoin_handler(call.message.chat.id, call.id)
    elif call.data == 'tgstars':
        tgstars_handler(call.message.chat.id, call.id)
    elif call.data == 'referral':
        referral_handler(call.message.chat.id, call.id)


def subscriptions_handler(userid, callid):
    bot.answer_callback_query(callid, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ü–æ–¥–ø–∏—Å–∫–∏")

    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("üìÇ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data='category')
    btn2 = types.InlineKeyboardButton("üè¢ –í—ã–±—Ä–∞—Ç—å –±–∏—Ä–∂–∏", callback_data='jobcenter')
    markup.add(btn1, btn2)

    bot.send_message(userid, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö...", reply_markup=markup)


def payments_handler(userid, callid):
    bot.answer_callback_query(callid, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –û–ø–ª–∞—Ç—É")
    # –í—ã–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞ –≤ —Ç—É–≥—Ä–∏–∫–∞—Ö
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç—ã –¥–æ –∫–æ—Ç–æ—Ä–æ–π –æ–ø–ª–∞—á–µ–Ω —Ç–∞—Ä–∏—Ñ
    user = session.query(User).filter(User.tele_id == userid).first()
    bill = session.query(Bill).filter(Bill.id == user.id).first()
    payed_till = str(bill.payed_till).split(".")[0]
    # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞—Ç—å –∫—Ä–∞—Å–Ω—ã–º –∏–ª–∏ –∑–µ–ª—ë–Ω—ã–º, –µ—Å–ª–∏ –æ–ø–ª–∞—á–µ–Ω–æ
    text = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ.\n\n' + \
           f'–ë–∞–ª–∞–Ω—Å: {bill.money_count} ‚ûø —Ñ–ª–∞–Ω–∫–æ–≤\n' + \
           f'–û–ø–ª–∞—á–µ–Ω–æ –¥–æ: {payed_till}'  

    if bill.payed_till.astimezone(timezone.utc) < datetime.now(timezone.utc):
        markup = types.InlineKeyboardMarkup([
            [
                types.InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–æ–π", callback_data='creditcard'),
                types.InlineKeyboardButton("üèµ –ö—Ä–∏–ø—Ç–æ–π", callback_data='cryptcoin'),
                types.InlineKeyboardButton("‚≠êÔ∏è –¢–ì –∑–≤—ë–∑–¥–∞–º–∏", callback_data='tgstars')
            ],
            [
                types.InlineKeyboardButton("--- –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É: ---", callback_data=' ')
            ],
            [
                types.InlineKeyboardButton("–ù–∞ –Ω–µ–¥–µ–ª—é", callback_data='payweek'),
                types.InlineKeyboardButton("–ù–∞ –º–µ—Å—è—Ü", callback_data='paymonth'),
                types.InlineKeyboardButton("–ù–∞ –≥–æ–¥", callback_data='payyear')
            ],
            [
                types.InlineKeyboardButton("üìá –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data='referral')
            ]
        ])
    else:
        print('DOESNT NEED TO PAY')
        print(f'{bill.payed_till.astimezone(timezone.utc)} < {datetime.now(timezone.utc)}')
        

        markup = types.InlineKeyboardMarkup([
            [
                types.InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–æ–π", callback_data='creditcard'),
                types.InlineKeyboardButton("üèµ –ö—Ä–∏–ø—Ç–æ–π", callback_data='cryptcoin'),
                types.InlineKeyboardButton("‚≠êÔ∏è –¢–ì –∑–≤—ë–∑–¥–∞–º–∏", callback_data='tgstars')
            ],
            [
                types.InlineKeyboardButton("üìá –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data='referral')
            ]
        ])

    bot.send_message(userid, text, reply_markup=markup)

def payweek_handler(userid, callid):
    bot.answer_callback_query(callid, "–ü—Ä–∏–æ–±—Ä–µ—Ç–∞—é –Ω–µ–¥–µ–ª—é –ø—Ä–µ–º–∏—É–º–∞")
    Bill().payweek(userid)
    payments_handler(userid, callid)

def paymonth_handler(userid, callid):
    bot.answer_callback_query(callid, "–ü—Ä–∏–æ–±—Ä–µ—Ç–∞—é –º–µ—Å—è—Ü –ø—Ä–µ–º–∏—É–º–∞")
    Bill().paymonth(userid)
    payments_handler(userid, callid)

def payyear_handler(userid, callid):
    bot.answer_callback_query(callid, "–ü—Ä–∏–æ–±—Ä–µ—Ç–∞—é –≥–æ–¥ –ø—Ä–µ–º–∏—É–º–∞")
    Bill().payyear(userid)
    payments_handler(userid, callid)
def referral_handler(tguserid, callid):
    bot.answer_callback_query(callid, "–í—ã–±—Ä–∞–Ω–∞ —Ä–µ—Ñ–µ—Ä—Ä–≤–ª—å–Ω–∞—è –ø—Ä–æ–≥–≥—Ä–∞–º–º–∞")
    # –ø–æ–ª—É—á–∏—Ç—å –Ω–∏–∫ –º–æ–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    user = session.query(User).filter(User.tele_id == tguserid).first()
    nick_name = user.get_refnick()
    # TODO –ø–æ–ª—É—á–∏—Ç—å —á–∏—Å–ª–æ –º–æ–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    ref_count = user.get_refcount()
    # TODO –ø–æ–∫–∞–∑–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∏–Ω—É–ª–∏ –≤—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
    money_get = 0
    # –ø–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Ä–µ—Ñ. —Å—Å—ã–ª–∫—É
    reflink = user.get_reflink()
    text = f'–ú–µ–Ω—è –ø—Ä–∏–≤—ë–ª: {nick_name}\n' + \
           f'–ú–æ–∏—Ö —Ä–µ—Ñ–µ—Ä—Ä–∞–ª–æ–≤: {ref_count}\n' + \
           '–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç —Ä–µ—Ñ–µ—Ä—Ä–∞–ª–æ–≤: —Ç—É–≥—Ä–∏–∫–∏\n' + \
           f'–ú–æ—è —Ä–µ—Ñ–µ—Ä—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {reflink}'

    markup = types.InlineKeyboardMarkup([
        [
            types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payment')
        ]
    ])

    bot.send_message(tguserid, text, reply_markup=markup)


def about_handler(userid, callid):
    bot.answer_callback_query(callid, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –û –±–æ—Ç–µ")
    
    markup = types.InlineKeyboardMarkup(row_width=3)
    btn1 = types.InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª", url='https://t.me/FreeLanceGet')
    btn2 = types.InlineKeyboardButton("üë• –ß–∞—Ç", url='https://t.me/getFreelanceChat')
    btn3 = types.InlineKeyboardButton("üë®‚Äçüëß‚Äçüëß –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º", callback_data='feedback')
    markup.add(btn1, btn2, btn3)

    bot.send_message(userid, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ...", reply_markup=markup)


def category_handler(userid, callid):
    bot.answer_callback_query(callid, '–í—ã–±—Ä–∞–Ωo –ö–∞—Ç–µ–≥–æ—Ä–∏–∏')
    bot.send_message(userid, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞–±–æ—Ç, –æ –∫–æ—Ç–æ—Ä—ã—Ö —Ö—Ç–∏—Ç–µ —É–∑–Ω–∞–≤–∞—Ç—å –ø–µ—Ä–≤—ã–º.')

def jobcenter_handler(userid, callid):
    bot.answer_callback_query(callid, '–í—ã–±—Ä–∞–Ω–∞ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
    bot.send_message(userid, '–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂–∏, —Å –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏.')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–∏: {message_id_–≤_—á–∞—Ç–µ_–ø–æ–¥–¥–µ—Ä–∂–∫–∏: user_id}
# TODO –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –ë–î
message_to_user = {}
def feedback_handler(userid, callid):
    bot.answer_callback_query(callid, '–í—ã–±—Ä–∞–Ω–∞ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
    bot.send_message(userid, '–Ø –≥–æ—Ç–æ–≤ –ø–µ—Ä–µ–¥–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤–æ–µ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É.')

def creditcard_handler(userid, callid):
    bot.answer_callback_query(callid, '–í—ã–±—Ä–∞–Ω–∞ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π')
    bot.send_message(userid, '–≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â—ë —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.')

def cryptcoin_handler(userid, callid):
    bot.answer_callback_query(callid, '–í—ã–±—Ä–∞–Ω–∞ –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π')
    bot.send_message(userid, '–≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â—ë —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.')

def tgstars_handler(userid, callid):
    bot.answer_callback_query(callid, '–í—ã–±—Ä–∞–Ω–∞ –û–ø–ª–∞—Ç–∞ –¢–ì –∑–≤—ë–∑–¥–∞–º–∏')
    bot.send_message(userid, '–≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â—ë —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.')


def get_referral_id_by_reflink(reflink: str):
    referral = session.query(Referral).filter(Referral.reflink == reflink).first()
    if referral:
        user = session.query(User).filter(User.id == referral.id).first()
        return referral.id, user.name
    else:
        return None


### OLD CODE ###
@bot.message_handler(commands=['stats', 'st'])
def handle_stats(message):
    
    text = 'üìà Statistics by category of job'
    text = text+'\n'+'``` Time            ( 1   /7   /30 days)```'
    categories = ['admin', 'webdev', 'dev', 'webdis']
    for category in categories:
        # print(category)
        day, week, month = get_stats_by(category)
        text = text+'\n'+'``` Jobs in {:8s}: {:,d}  {:,d}  {:,d}```'.format(category, day, week, month) 
        # print(text)

    text = text+'\nüë• '+'_Subscribed users:_ *'+str(get_stats_subscribers())+'*'
    print(text)
    bot.send_message(message.chat.id, text, parse_mode='MARKDOWN')


#####################################################################
def user_exist(user_id):
    cur = session.execute(text("SELECT id FROM users WHERE tele_id = '{}'".format(user_id)))
    try:
        output = 'Checked ID: {} \
                 \nExisted User ID: {} \
                 \n__DEBUG__ __MESSAGE__'.format(user_id, cur.fetchone()[0])
        bot.send_message(user_id, output)
        return True
    except TypeError: # if not in DB
        return False


def send_jobs(site, category, user_id):
    output = fetch_jobs(site, category)
    for msg in output:
        bot.send_message(user_id, msg, parse_mode='HTML', disable_web_page_preview=True)

    output = 'You can subscribe for updates in this category by /subscribe_{}'.format(category) + \
             '\nOnly one category can be subscribed'
    bot.send_message(user_id, output)

def fetch_jobs(site, category):
    output = []
    messages_limit = 5
    cur = session.execute("SELECT * \
                           FROM job \
                           WHERE url like '%{}%' \
                           AND category = '{}' \
                           ORDER BY id \
                           DESC LIMIT {}".format(site, category, messages_limit))
    jobs = cur.fetchall()
    for job in jobs:
        text = str(job.description)
        if text == None: text = '-'
        
        price = job.price
        if job.price == None: price = '-+-'

        output.append("    üõ† <b>{}</b>".format(str(job.title))  + \
                    "\n    üï∞ {} #Ô∏è‚É£ {}".format(job[7], job[0]) + \
                    "\n    üí∞ {}".format(price) + \
                    "\n    üåê <a href='{}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>".format(job[4]) + \
                    "\n    üóí {}".format(text))

    return output


if __name__ == '__main__':

    #from IPython import embed

    while True:
        print("ParceLancer Started")
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(e.with_traceback(True))
            print(f'–°–ª–æ–º–∞–ª—Å—è: {e} : {e.__cause__}')
            #embed()

        time.sleep(1)
